* mu4e setup 
  I use ~mu4e~ with offlineimap and mu for my email. In order to use
  this file, you'll need to make sure that offlineimap and mu are
  installed on your system. Offlineimap requires a bit of
  configuration to get it started. 
** Other files
   In order to use offlineimap, you need to create a file
   ~~/.offlineimaprc~. Mine looks like this: 

   #+BEGIN_EXAMPLE
   [general]
   accounts = utexas
   maxsyncaccounts = 5
   pythonfile = ~/.offlineimap.py
   
   [Account utexas]
   localrepository = utexas-local
   remoterepository = utexas-remote
   
   [Repository utexas-local]
   type = Maildir
   localfolders = ~/Documents/Maildir/utexas
   
   [Repository utexas-remote]
   type = Gmail
   remoteuser = branham@utexas.edu
   remotepasseval = get_password_emacs("imap.gmail.com", "branham@utexas.edu", "993")
   sslcacertfile = /etc/ssl/certs/ca-certificates.crt
   realdelete = no
   
   folderfilter = lambda foldername: foldername not in ['[Gmail]/Spam', '[Gmail]/Starred', '[Gmail]/Important']
   #+END_EXAMPLE

   To avoid storing my password in plain text, I store it in an
   encrypted file ~~/.authinfo~ that looks like this:

#+BEGIN_EXAMPLE
machine imap.gmail.com login branham@utexas.edu port 993 password YOURPASS
machine smtp.gmail.com login branham@utexas.edu port 587 password YOURPASS
#+END_EXAMPLE

 You can then use emacs to encrypt that file with ~M-x
   epa-encrypt-file~ and save it as ~~/.authinfo.gpg~. Finally, you
   need to set up a python script so that offlineimap can use your
   ~.authinfo.gpg~ file:

#+BEGIN_EXAMPLE
#!/usr/bin/python
import re, os

def get_password_emacs(machine, login, port):
    s = "machine %s login %s port %s password ([^ ]*)\n" % (machine, login, port)
    p = re.compile(s)
    authinfo = os.popen("gpg -q --no-tty -d ~/.authinfo.gpg").read()
    return p.search(authinfo).group(1)
#+END_EXAMPLE

Finally, we can get mu4e set up. 
#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :config
    ;; default
    (setq mu4e-maildir "~/Documents/Maildir/utexas")
    (setq mu4e-drafts-folder "/[Gmail].Drafts")
    (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
    (setq mu4e-trash-folder  "/[Gmail].Trash")
    ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
    (setq mu4e-sent-messages-behavior 'delete)
    (setq
     mu4e-get-mail-command "offlineimap"   ;; or fetchmail, or ...
     mu4e-update-interval 180)             ;; update every 3 minutes
    ;; setup some handy shortcuts
    ;; you can quickly switch to your Inbox -- press ``ji''
    ;; then, when you want archive some messages, move them to
    ;; the 'All Mail' folder by pressing ``ma''.
    (setq mu4e-maildir-shortcuts
          '( ("/INBOX"  . ?i)
             ("/[Gmail].Sent Mail"   . ?s)
             ("/[Gmail].Trash"  . ?t)
             ("/[Gmail].All Mail" . ?a)))
    ;; something about ourselves
    (setq mu4e-user-mail-address-list '("branham@utexas.edu"))
    (setq
     user-mail-address "branham@utexas.edu"
     user-full-name  "Alex Branham")
    (setq mu4e-compose-signature
          (concat
           "J. Alexander Branham\n"
           "PhD Candidate\n"
           "Department of Government\n"
           "University of Texas at Austin\n"
           "www.jabranham.com"
           "\n"))
    (setq mu4e-compose-dont-reply-to-self t) ; don't reply to self
    (setq mu4e-compose-complete-only-after "2015-01-01")
    (setq mu4e-view-show-addresses t)
    (setq mu4e-hide-index-messages t)
    ;; enable inline images
    (setq mu4e-view-show-images t)
    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
    ;; don't keep message buffers around
    (setq message-kill-buffer-on-exit t)
    (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
    (setq mu4e-use-fancy-chars t)
    (setq mu4e-headers-skip-duplicates t)
    ;; attachments go here
    (setq mu4e-attachment-dir "~/Downloads")
    (use-package gnus-dired
      ;; make the `gnus-dired-mail-buffers' function also work on
      ;; message-mode derived modes, such as mu4e-compose-mode
      :config
      (defun gnus-dired-mail-buffers ()
        "Return a list of active message buffers."
        (let (buffers)
          (save-current-buffer
            (dolist (buffer (buffer-list t))
              (set-buffer buffer)
              (when (and (derived-mode-p 'message-mode)
                         (null message-sent-message-via))
                (push (buffer-name buffer) buffers))))
          (nreverse buffers)))
      (setq gnus-dired-mail-mode 'mu4e-user-agent)
      (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode))
    ;; configure orgmode support in mu4e
    (use-package org-mu4e
    ;; when mail is sent, automatically convert org body to HTML
      :config
      (setq org-mu4e-convert-to-html t))
    ;; need to do org-mu4e-compose-org-mode
    ;; and include #+OPTIONS: tex:imagemagick
    ;; then send while in headers for this to work properly 
    ;; Start mu4e in fullscreen
    (defun my-mu4e-start ()
      (interactive)
      (window-configuration-to-register :mu4e-fullscreen)
      (mu4e)
      (delete-other-windows))
    ;; Restore previous window configuration
    (defun mu4e-quit-session ()
      "Restores the previous window configuration and kills the mu4e buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :mu4e-fullscreen))
    (define-key mu4e-main-mode-map (kbd "q") 'mu4e-quit-session)
    (global-set-key (kbd "<f1>") 'my-mu4e-start)
    (global-set-key (kbd "<f2>") 'mu4e-compose-new)
    (mu4e t) ; starts mu4e when emacs starts, but silently
    (use-package mu4e-contrib
      :config
      ;; html2text command from eww browser
      (setq mu4e-html2text-command 'mu4e-shr2text)
      ;; use aV to open message in browser
      (add-to-list 'mu4e-view-actions
                   '("ViewInBrowser" . mu4e-action-view-in-browser) t))
    )
#+END_SRC

* Sending mail
#+BEGIN_SRC emacs-lisp

  (use-package smtpmail
    :config
    (setq message-send-mail-ggfunction 'smtpmail-send-it
          smtpmail-stream-type 'starttls
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587
          send-mail-function 'smtpmail-send-it))
   

  (use-package mu4e-alert
    :ensure t
    :config
    ;; Choose the style you prefer for desktop notifications
    ;; If you are on Linux you can use
    ;; 1. notifications - Emacs lisp implementation of the Desktop Notifications API
    ;; 2. libnotify     - Notifications using the `notify-send' program, requires `notify-send' to be in PATH
    ;;
    ;; On Mac OSX you can set style to
    ;; 1. notifier      - Notifications using the `terminal-notifier' program, requires `terminal-notifier' to be in PATH
    ;; 1. growl         - Notifications using the `growl' program, requires `growlnotify' to be in PATH
    (mu4e-alert-set-default-style 'libnotify)
    (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
    (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
    (setq mu4e-alert-interesting-mail-query
          (concat
           "flag:unread"
           " AND NOT flag:trashed"
           " AND NOT maildir:"
           "\"/[Gmail].All Mail\"")))


#+END_SRC
