* R (with ESS)
  ESS (Emacs Speaks Statistics) is a
  [[http://ess.r-project.org/][great project]] and makes emacs speak with R.

#+BEGIN_SRC emacs-lisp
  (use-package ess-site ; for R goodness
    :ensure ess
    :diminish eldoc-mode
    :config
    (add-hook 'ess-mode-hook
              (lambda ()
                (ess-set-style 'RStudio)))
    (setq ess-offset-arguments 'prev-line)
    (setq ess-ask-for-ess-directory nil))

#+END_SRC
* Python
The package is called python, the mode is python-mode: 
#+BEGIN_SRC emacs-lisp
  (use-package python
    :mode ("\\.py\\'". python-mode)
    :interpreter "python")
#+END_SRC

Elpy is a ton of customizations for python. Note that I had to add it
to ~package-archives~ in [[file:init.el]]. Load it up:

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (progn
      (elpy-enable))
    :config
    (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode)))
#+END_SRC

** Django 
Finally, we can load up [[http://www.deadpansincerity.com/docs/pony/][pony-mode]] to take care of django projects. 

#+BEGIN_SRC emacs-lisp
  (use-package pony-mode
    :ensure t)
#+END_SRC

* Stan
  Stan is a Bayesian modeling language. Emacs has a mode for it (of
  course!) Stan-snippets has some yasnippet stuff. 

#+BEGIN_SRC emacs-lisp
  (use-package stan-mode
    :ensure t)
    ;; :config
    ;; (use-package stan-snippets
    ;;   :ensure t))

#+END_SRC
* Ruby
#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
    :defer t
    :config
    (use-package robe
      :diminish robe-mode
      :ensure t
      :config
      (add-to-list 'company-backends 'company-robe)
      (add-hook 'ruby-mode-hook 'robe-mode)))
#+END_SRC
* Code and syntax checking
  Emacs can tell you magically if your code is wrong (or just
  ugly). Flycheck is a minor mode for this. Let's enable it globally. 

  Flycheck can check your R code too, but you'll need to install the
  ~lintr~ package. 

#+BEGIN_SRC emacs-lisp
  (use-package flycheck ; checks for style and syntax
    :ensure t
    :diminish flycheck-mode
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
    (add-hook 'after-init-hook #'global-flycheck-mode))

#+END_SRC

Electric operator will turn ~a=10*5+2~ into ~a = 10 * 5 + 2~, so let's
enable it for R:

#+BEGIN_SRC emacs-lisp
  (use-package electric-operator
    :ensure t
    :config
    (add-hook 'ess-mode-hook #'electric-operator-mode)
    (add-hook 'python-mode-hook #'electric-operator-mode))
#+END_SRC
* Whitespace
  Whitespace is evil. Let's get rid of as much as possible. But we
  don't want to do this with files that already had whitespace (from
  someone else's project, for example).  This mode will call
  ~whitespace-cleanup~ before buffers are saved (but smartly)!

#+BEGIN_SRC emacs-lisp
  (use-package whitespace-cleanup-mode 
    :ensure t
    :diminish whitespace-cleanup-mode
    :config
    (add-hook 'haskell-mode-hook 'whitespace-cleanup-mode)
    (add-hook 'emacs-lisp-mode-hook 'whitespace-cleanup-mode)
    (add-hook 'lisp-mode-hook 'whitespace-cleanup-mode)
    (add-hook 'scheme-mode-hook 'whitespace-cleanup-mode)
    (add-hook 'ess-mode-hook 'whitespace-cleanup-mode)
    (add-hook 'erlang-mode-hook 'whitespace-cleanup-mode)
    (add-hook 'clojure-mode-hook 'whitespace-cleanup-mode)
    (add-hook 'ruby-mode-hook 'whitespace-cleanup-mode)
    (add-hook 'stan-mode-hook 'whitespace-cleanup-mode))

#+END_SRC
