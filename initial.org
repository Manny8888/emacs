
#+BEGIN_SRC emacs-lisp


  ;; (use-package ido-ubiquitous
  ;;   :ensure t
  ;;   :config
  ;;   (use-package smex
  ;;     :ensure t
  ;;     :bind
  ;;     ("M-x" . smex)
  ;;     ("C-c C-c M-x" . execute-extended-command)
  ;;     ("M-X" . smex-major-mode-commands))
  ;;   (use-package ido-vertical-mode
  ;;     :ensure t
  ;;     :config
  ;;     (ido-mode 1) ; turn on ido mode
  ;;     (ido-vertical-mode 1) ; turn on ido vertical mode
  ;;     (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))) ; make up and down keys work

  (use-package helm
    :ensure t
    :bind
    ("C-c h" . helm-command-prefix)
    ("M-x" . helm-M-x)
    ("M-y" . helm-show-kill-ring)
    ("C-x b". helm-mini)
    ("C-x C-f". helm-find-files)
    ("C-c h g". helm-google-suggest)
    ("C-c h c" . helm-calcul-expression)
    :init
    (require 'helm-config)
    :config
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))
    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t
          helm-M-x-fuzzy-match                  t ; optional fuzzy matching for helm-M-x
          helm-autoresize-mode                  t
          helm-buffers-fuzzy-matching           t
          helm-recentf-fuzzy-match              t)
    (helm-mode t))
  (use-package projectile
    :ensure t)
  (use-package helm-projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'helm)
    (helm-projectile-on))
  (use-package helm-R
    :ensure t)
  (use-package helm-flyspell
    :ensure t
    :config
    (define-key flyspell-mode-map (kbd "M-/") 'helm-flyspell-correct))
  (use-package helm-company
    :ensure t
    :config
    (eval-after-load 'company
    '(progn
       (define-key company-mode-map (kbd "C-;") 'helm-company)
       (define-key company-active-map (kbd "C-;") 'helm-company))))
  (use-package helm-flycheck
    :ensure t
    :config
    (eval-after-load 'flycheck
     '(define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck)))



  ;; (use-package smart-mode-line
  ;;   :ensure t
  ;;   :config
  ;;   (sml/setup))







  ;; misc settings
  ;(global-set-key (kbd "M-/") 'hippie-expand) ; use M-/ for hippie expand
  ;; resizing 'windows' (i.e., inside the frame)



  ;; kill line if no region active 
  ;; change frame name of emacs



  ;;; init.el ends here
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(ess-R-font-lock-keywords
     (quote
      ((ess-R-fl-keyword:modifiers . t)
       (ess-R-fl-keyword:fun-defs . t)
       (ess-R-fl-keyword:keywords . t)
       (ess-R-fl-keyword:assign-ops . t)
       (ess-R-fl-keyword:constants . t)
       (ess-fl-keyword:fun-calls . t)
       (ess-fl-keyword:numbers . t)
       (ess-fl-keyword:operators . t)
       (ess-fl-keyword:delimiters . t)
       (ess-fl-keyword:= . t)
       (ess-R-fl-keyword:F&T . t)
       (ess-R-fl-keyword:%op% . t))))
   '(org-agenda-files nil)
   '(send-mail-function (quote smtpmail-send-it)))

  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

#+END_SRC
