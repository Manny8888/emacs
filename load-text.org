This is the file that loads my configuration for text files. I use
LaTeX a lot, as well as markdown. I use org too, but that's loaded in
the load-org.org file. 

I end sentences with a single space. 

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

I like autofill mode so that lines break at about 80 characters. Let's
turn it on automaticallly in text mode:

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

=fill-paragraph= is nice, but emacs weirdly lacks a convenient way to
unfill paragraphs once they're filled. This command ([[http://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html][credit]]) fixes
that. 

#+BEGIN_SRC emacs-lisp
  (defun endless/fill-or-unfill ()
    "Like `fill-paragraph', but unfill if used twice."
    (interactive)
    (let ((fill-column
           (if (eq last-command 'endless/fill-or-unfill)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

  (global-set-key [remap fill-paragraph]
                  #'endless/fill-or-unfill)
#+END_SRC

* Markdown
  Markdown mode for Markdown editing! 

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode ; for markdown mode
    :ensure t)
#+END_SRC

* LaTeX
  AuCTeX is better than the built in latex mode; let's use it. It's
  good out of the box, but I like to use latexmk so that I don't have
  to remember to rerun the file X times to get references right. 

#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :ensure t
    :mode ("\\.tex\\'" . latex-mode)
    :commands (latex-mode LaTeX-mode plain-tex-mode)
    :init
    (progn
      (add-hook 'LaTeX-mode-hook 'visual-line-mode)
      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
      (setq TeX-auto-save t
            TeX-parse-self t
            reftex-plug-into-AUCTeX t
            TeX-PDF-mode t)
      (setq-default TeX-master nil))
    (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-mode t)
    (eval-after-load "tex"
      '(add-to-list 'TeX-command-list '("latexmk" "latexmk -synctex=1 -shell-escape -pdf %s" TeX-run-TeX nil t :help "Process file with latexmk"))
      )
    (eval-after-load "tex"
      '(add-to-list 'TeX-command-list '("xelatexmk" "latexmk -synctex=1 -shell-escape -xelatex %s" TeX-run-TeX nil t :help "Process file with xelatexmk"))
      )
    (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk"))))
#+END_SRC

Finally, sometimes we want wordcounts. If I just want a quick snippet,
I can run the following command. If I want more information, I can
drop into a shell with ~C-c M-e~ (~shell-pop~) and run ~texcount
my-file.tex~:

#+BEGIN_SRC emacs-lisp
  (defun latex-word-count ()
      (interactive)
      (let* ((this-file (buffer-file-name))
             (word-count
              (with-output-to-string
                (with-current-buffer standard-output
                  (call-process "texcount" nil t nil "-brief" this-file)))))
        (string-match "\n$" word-count)
        (message (replace-match "" nil nil word-count))))
#+END_SRC

* Polymode (for knitr)
  Polymode is a (relatively new) way of working with multiple major
  modes. This is especially helpful if we want to use latex or
  markdown together with R code. 

#+BEGIN_SRC emacs-lisp
  (use-package polymode 
    :ensure t
    :mode
    ("\\.Snw" . poly-noweb+r-mode)
    ("\\.Rnw" . poly-noweb+r-mode)
    ("\\.Rmd" . poly-markdown+r-mode))

#+END_SRC
* References 
  RefTeX takes care of referencing things. You can use it with ~C-[~
  most places. I also use it in org mode, but we need to bind it to a
  different key since that's taken. Finally, I like to use natbib
  and pandoc-flavored markdown for references, so I set up reftex to
  understand that. 

  You will need to change ~reftex-default-bibliography~ to wherever
  you keep your main .bib file. 

  There are other reference setup options in [[file:load-helm.org][load-helm]] and [[file:load-org.org][load-org]]. 

#+BEGIN_SRC emacs-lisp
  (use-package reftex
    :commands turn-on-reftex
    :init
    (setq reftex-cite-format 
          '((?\C-m . "\\cite[]{%l}")
            (?t . "\\citet{%l}")
            (?p . "\\citep[]{%l}")
            (?P . "[@%l]")
            (?T . "@%l [p. ]")
            (?x . "[]{%l}")
            (?X . "{%l}")))
    (setq bibtex-autokey-titleword-length 0
          bibtex-autokey-titleword-separator ""
          bibtex-autokey-titlewords 0
          bibtex-autokey-year-length 4
          bibtex-autokey-year-title-separator "")
    (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))
    (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
    (setq reftex-extra-bindings t)
    :config
    (defun my-org-reftex-keybinding ()
      "Fixes reftex citation commands"
      (local-set-key (kbd "C-]") 'reftex-citation))
    (add-hook 'org-mode-hook 'my-org-reftex-keybinding)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
#+END_SRC

This package lets me search google scholar and automatically add
entries to my bib file: 

#+BEGIN_SRC emacs-lisp
  (use-package gscholar-bibtex
    :ensure t)
#+END_SRC


* Spell Check
  Flyspell checks for spelling on the fly. I use aspell instead of
  ispell because it's better. :-) You may need to install it
  separately, though I didn't need to. If you want to use non-english
  words, you can tell it so with ~ispell-local-dictionary~ variable. 

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :diminish flyspell-mode
    :init
    (setq flyspell-sort-corrections nil)
    (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
    :config
    (setq ispell-program-name "aspell")
    (setq ispell-list-command "--list")
    (add-hook 'text-mode-hook 'turn-on-flyspell)
    (add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
    (add-hook 'markdown-mode-hook 'turn-on-flyspell)
    (add-hook 'org-mode-hook 'turn-on-flyspell)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode))
#+END_SRC
