This is the file that loads my configuration for text files. I use
LaTeX a lot, as well as markdown. I use org too, but that's loaded in
the load-org.org file. 

I end sentences with a single space. 

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

I like autofill mode so that lines break at about 80 characters. Let's
turn it on automaticallly in text mode:

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

I use fill-paragraph in text modes, but sometimes I need to undo that.
So here's a function that does exactly that! I map it to ~M-Q~ since
fill-paragraph is ~M-q~. 

#+BEGIN_SRC emacs-lisp
  (defun unfill-paragraph (&optional region)
        "Takes a multi-line paragraph and makes it into a single line of text."
        (interactive (progn (barf-if-buffer-read-only) '(t)))
        (let ((fill-column (point-max)))
          (fill-paragraph nil region)))

  (define-key global-map "\M-Q" 'unfill-paragraph)
#+END_SRC

* Markdown
  Markdown mode for Markdown editing! 

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode ; for markdown mode
    :ensure t)
#+END_SRC

* LaTeX
  AuCTeX is better than the built in latex mode; let's use it. It's
  good out of the box, but I like to use latexmk so that I don't have
  to remember to rerun the file X times to get references right. 

#+BEGIN_SRC emacs-lisp
(use-package auctex ; for LaTeX documents
  :ensure t
  :mode ("\\.tex\\'" . latex-mode)
  :commands (latex-mode LaTeX-mode plain-tex-mode)
  :init
  (progn
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (setq TeX-auto-save t
          TeX-parse-self t
          reftex-plug-into-AUCTeX t
          TeX-PDF-mode t)
    (setq-default TeX-master nil))
  (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
  (setq TeX-source-correlate-method 'synctex)
  (setq TeX-source-correlate-mode t)
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list '("latexmk" "latexmk -synctex=1 -shell-escape -pdf %s" TeX-run-TeX nil t :help "Process file with latexmk"))
    )
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list '("xelatexmk" "latexmk -synctex=1 -shell-escape -xelatex %s" TeX-run-TeX nil t :help "Process file with xelatexmk"))
    )
  (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk"))))
#+END_SRC

* Polymode (for knitr)
  Polymode is a (relatively new) way of working with multiple major
  modes. This is especially helpful if we want to use latex or
  markdown together with R code. 

#+BEGIN_SRC emacs-lisp
  (use-package polymode 
    :ensure t
    :mode
    ("\\.Snw" . poly-noweb+r-mode)
    ("\\.Rnw" . poly-noweb+r-mode)
    ("\\.Rmd" . poly-markdown+r-mode))

#+END_SRC
* RefTeX
  RefTeX takes care of referencing things. You can use it with ~C-[~
  most places. I also use it in org mode, but we need to bind it to a
  different key since that's taken. Finally, I like to use biblatex
  and pandoc-flavored markdown for references, so I set up reftex to
  understand that. 

  You will need to change ~reftex-default-bibliography~ to wherever
  you keep your main .bib file. 

#+BEGIN_SRC emacs-lisp
  (use-package reftex ; bibliography and reference management
    :commands turn-on-reftex
    :init
    (setq reftex-cite-format 
          '((?\C-m . "\\cite[]{%l}")
            (?t . "\\citet{%l}")
            (?p . "\\citep[]{%l}")
            (?P . "[@%l]")
            (?T . "@%l [p. ]")
            (?x . "[]{%l}")
            (?X . "{%l}")))
    (setq bibtex-autokey-titleword-length 0)
    (setq bibtex-autokey-titleword-separator "")
    (setq bibtex-autokey-titlewords 0)
    (setq bibtex-autokey-year-length 4)
    (setq bibtex-autokey-year-title-separator "")
    (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
    (setq reftex-extra-bindings t)
    :config
    (defun my-org-reftex-keybinding ()
      "Fixes reftex citation commands"
      (local-set-key (kbd "C-]") 'reftex-citation))
    (add-hook 'org-mode-hook 'my-org-reftex-keybinding)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
#+END_SRC

* Spell Check
  Flyspell checks for spelling on the fly. I use aspell instead of
  ispell because it's better. :-) You may need to install it
  separately, though I didn't need to. If you want to use non-english
  words, you can tell it so with ~ispell-local-dictionary~ variable. 


#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :diminish flyspell-mode
    :init
    (setq flyspell-sort-corrections nil)
    (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
    :config
    (setq ispell-program-name "aspell")
    (setq ispell-list-command "--list")
    (add-hook 'text-mode-hook 'turn-on-flyspell)
    (add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
    (add-hook 'markdown-mode-hook 'turn-on-flyspell)
    (add-hook 'org-mode-hook 'turn-on-flyspell)

    (define-key ctl-x-map "\C-i"
      #'endless/ispell-word-then-abbrev)

    (defun endless/ispell-word-then-abbrev (p)
      "Call `ispell-word', then create an abbrev for it.
  With prefix P, create local abbrev. Otherwise it will
  be global.
  If there's nothing wrong with the word at point, keep
  looking for a typo until the beginning of buffer. You can
  skip typos you don't want to fix with `SPC', and you can
  abort completely with `C-g'."
      (interactive "P")
      (let (bef aft)
        (save-excursion
          (while (if (setq bef (thing-at-point 'word))
                     ;; Word was corrected or used quit.
                     (if (ispell-word nil 'quiet)
                         nil ; End the loop.
                       ;; Also end if we reach `bob'.
                       (not (bobp)))
                   ;; If there's no word at point, keep looking
                   ;; until `bob'.
                   (not (bobp)))
            (backward-word))
          (setq aft (thing-at-point 'word)))
        (if (and aft bef (not (equal aft bef)))
            (let ((aft (downcase aft))
                  (bef (downcase bef)))
              (define-abbrev
                (if p local-abbrev-table global-abbrev-table)
                bef aft)
              (message "\"%s\" now expands to \"%s\" %sally"
                       bef aft (if p "loc" "glob")))
          (user-error "No typo at or before point"))))
  

    (setq save-abbrevs 'silently)
    (setq-default abbrev-mode t))
#+END_SRC
