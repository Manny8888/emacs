This is a file to store some miscellaneous functions I use every now
and then. 

* Jekyll functions
I use ~jekyll-publish-draft~ to move a post from _drafts/ to _posts/
which publishes it to my blog. Inspiration from [[http://pasoev.github.io/programming/2015/10/31/jekyll-posts-emacs-capture/][here]]

#+BEGIN_SRC emacs-lisp
  (defun today-is ()
    "Return current year-month-day."
    (format-time-string "%Y-%m-%d"))

  (defun jekyll-drafts ()
    (let ((default-directory
            (concat (projectile-project-root) "_drafts")))
    (file-expand-wildcards "*.md")))

  (defun jekyll-publish-draft (post)
    "Mark one of the posts from the Jekyll drafts directory as published.
     This actually means moving the post from the _drafts to the _posts 
     directory."
    (interactive
     (list (completing-read "Post to publish: "
                            (jekyll-drafts) nil t "")))
    (copy-file (concat (projectile-project-root) "_drafts/" post)
               (concat (projectile-project-root) "_posts/" (today-is) "-" post))
    (delete-file (concat (projectile-project-root) "_drafts/" post)))

#+END_SRC

* Sudo editing
This function lets me edit the current file as root. Note that I can
also edit files as root when using helm find files by simply using
~C-c r~ in the buffer. So I use this to edit the already-open file as
root and then helm to open files as root. [[http://emacsredux.com/blog/2013/04/21/edit-files-as-root/][source for this function]]

#+BEGIN_SRC emacs-lisp
  (defun sudo-edit (&optional arg)
    "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC
* Swap horizontal and vertical windows
Sometimes I want horizontal windows to be vertical or vice versa. This
lets me make that happen:

#+BEGIN_SRC emacs-lisp
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
#+END_SRC
* Splitting windows
  These functions make splitting windows behave more like I want it
  to. This way, calling ~C-x 2~ or ~C-x 3~ both splits the window
  /and/ shows the last buffer. 

#+BEGIN_SRC emacs-lisp
  (defun my/vsplit-last-buffer (prefix)
    "Split the window vertically and display the previous buffer."
    (interactive "p")
    (split-window-vertically)
    (other-window 1 nil)
    (if (= prefix 1)
      (switch-to-next-buffer)))
  (defun my/hsplit-last-buffer (prefix)
    "Split the window horizontally and display the previous buffer."
    (interactive "p")
    (split-window-horizontally)
    (other-window 1 nil)
    (if (= prefix 1) (switch-to-next-buffer)))
  (bind-key "C-x 2" 'my/vsplit-last-buffer)
  (bind-key "C-x 3" 'my/hsplit-last-buffer)
#+END_SRC

