Emacs has a lot of behavior as a default that really isn't the
best. This file tries to correct much of that. This file also makes
emacs be able to do some really neat stuff. So basically I guess this
file corrects stupid behavior then has some misc functions. :-) 
* UTF-8
Pretty please use utf-8 for all the things:

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8-unix)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
#+END_SRC
* Theme
  By default, emacs starts with a blindingly white theme. Let's get
  rid of that pronto. 
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :defer t
    :init
    (load-theme 'spacemacs-dark t))
#+END_SRC
* Scrolling
  Emacs has some awful scrolling by default. This gets rid of that. 

#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling ; stops emacs nonsense default scrolling
    :ensure t
    :init
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ; one line at a time
    (setq mouse-wheel-progressive-speed nil) ; don't accelerate scrolling
    (setq mouse-wheel-follow-mouse 't) ; scroll window under mouse
    (setq scroll-step 1)) ; keyboard scroll one line at a time

#+END_SRC
* Smart parens
  I'm not good at keeping track of parentheses. This makes me slightly
  better at it. It also keeps track of other things that should
  "match" like {}, [], "", ``'' (in latex mode), etc. 

#+BEGIN_SRC emacs-lisp
  (use-package smartparens-config ; makes parens easier to keep track of
    :ensure smartparens
    :diminish smartparens-mode
    :config
    (smartparens-global-strict-mode))

#+END_SRC

Since I am super bad at parens, though, I need more help. This package
makes parentheses different colors based on level so it's a little
easier to see which parens match with what. I've heard that it makes
emacs slow for some people, so you may want to disable it if emacs
seems slow to you. 

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters ; for nice coloring of parens
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'ess-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Embrace
[[https://github.com/cute-jumper/embrace.el][Embrace]] lets me add parens and quotes and whatnot around words. I bind
=C-,= to =embrace-commander=. 

#+BEGIN_SRC emacs-lisp
  (use-package embrace
    :ensure t
    :config
    (bind-keys*
     ("C-," . embrace-commander))
    (add-hook 'LaTeX-mode-hook 'embrace-LaTeX-mode-hook)
    (add-hook 'org-mode-hook 'embrace-org-mode-hook))
#+END_SRC

* PDF viewer
  I like emacs, so why not view PDFs in it? Build the server when it
  asks - this may take a second.

  NOTE: ~pdf-tools~ only officially supports gnu/linux operating
  systems. I think that it will work on macs as well, but you may have
  to finagle it a bit. Regardless, I tell emacs to only use it if the
  OS is linux based. 

#+BEGIN_SRC emacs-lisp 
  (when (eq system-type 'gnu/linux)
    (use-package pdf-tools
      :ensure t
      :config
      (pdf-tools-install)
      (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
      (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))))
#+END_SRC

* File finder (Dired)
  Emacs can act as your file finder/explorer. Dired is the built-in
  way to do this, but we can extend its capabilities a bit. In
  particular, I like to modify what information is shown by default. 

#+BEGIN_SRC emacs-lisp
    (use-package dired+
      :ensure t
      :config
      (setq dired-dwim-target t)
  (setq dired-recursive-copies (quote always)))

#+END_SRC

Here I sort dired buffers with directories (folders) first, then
everything else:

#+BEGIN_SRC emacs-lisp
  (defadvice dired-readin (after dired-after-updating-hook first () activate)
    "Sort dired listings with directories first before adding marks."
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2) ;; beyond dir. header
        (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
      (set-buffer-modified-p nil)))
#+END_SRC

Sometimes I uncompress .zip files from within emacs. This lets me do
it in dired with ~Z~

#+BEGIN_SRC emacs-lisp
  (eval-after-load "dired-aux"
     '(add-to-list 'dired-compress-file-suffixes 
                   '("\\.zip\\'" ".zip" "unzip")))
#+END_SRC

Finally, I like the ability to quickly narrow the list of files I'm
looking at using dired. This package lets me do that:

#+BEGIN_SRC emacs-lisp
  (use-package dired-narrow
    :bind
    ("C-c n". dired-narrow-fuzzy)
    :ensure t)
#+END_SRC

* Modeline
  Trying out spacemacs modeline... 

#+BEGIN_SRC emacs-lisp
  (use-package spaceline-config
    :ensure spaceline
    :config
    (spaceline-emacs-theme)
    (spaceline-helm-mode)
    (spaceline-toggle-buffer-encoding-abbrev-off))
#+END_SRC
* Which-key
  [[https://github.com/justbur/emacs-which-key][Which key]] shows key bindings for incomplete commands (prefixes).
  Let's try it out:

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

* Window numbering
  This package will assign a number to each window, then I can use
  ~M-1~ through ~M-0~ to switch to these numbers. 

#+BEGIN_SRC emacs-lisp
  (use-package window-numbering
    :ensure t
    :config
    (window-numbering-mode))
#+END_SRC

* Buffer management
Here's a quick [[https://github.com/abo-abo/hydra][hydra]] that I wrote to quickly move buffers from window
to window: 

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-window (global-map "C-c mb")
      "window management"
      ("l" buf-move-left "left")
      ("r" buf-move-right "right")
      ("d" buf-move-down "down")
      ("u" buf-move-up "up"))
#+END_SRC

* Keybindings
  I use ~desktop-clear~ to get rid of buffers and other things every
  now and then. Let's bind it to f12: 

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f12>") 'desktop-clear)
#+END_SRC

C-x C-c is originally bound to kill emacs. I accidentally type this
from time to time which is super-frustrating. Get rid of it:

#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-x C-c"))
#+END_SRC
** Keyfreq
This is a neat package that keeps track of which commands you're
using. You can then assign your most-used commands to more accessible
keybindings. 
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :ensure t
    :config
    (setq keyfreq-excluded-commands
          '(self-insert-command
            org-self-insert-command
            delete-backward-char
            pdf-view-next-page-command
            yas-expand
            pdf-view-scroll-up-or-next-page
            org-delete-backward-char
            mouse-drag-region
            LaTeX-insert-left-brace
            mouse-drag-region
            newline
            abort-recursive-edit
            previous-line
            next-line))
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC

* Server
  Start the server:
#+BEGIN_SRC emacs-lisp
  (use-package server
    :if window-system
    :init
    (add-hook 'after-init-hook 'server-start t))
#+END_SRC

* Comments

This package makes emacs's commenting behavior work more like how I
want it to: when the cursor is at the beginning or mid line, ~M-;~
comments out the line. If it's at the end of a line, then ~M-;~ starts
a comment at the end of the line. 

  #+BEGIN_SRC emacs-lisp
    (use-package smart-comment
      :ensure t
      :bind ("M-;" . smart-comment))
  #+END_SRC

* Crux
  [[https://github.com/bbatsov/crux/blob/master/crux.el][Crux]] is a collection of useful extensions. Here I bind some of the
  more useful functions: 


  #+BEGIN_SRC emacs-lisp
    (use-package crux
      :ensure t
      :diminish abbrev-mode
      :bind
      ("C-a" . crux-move-beginning-of-line)
      ("C-x i" . crux-ispell-word-then-abbrev)
      ("C-c o" . crux-open-with)
      ("C-c C-r r" . crux-sudo-edit)
      :config
      (setq save-abbrevs 'silently)
      (setq-default abbrev-mode t))
  #+END_SRC

* Avy

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-word-1))
#+END_SRC

* Help windows
You can use =C-h f=, =C-h v= and others to read docs for functions,
variables, etc. This makes emacs switch focus to these windows:

#+BEGIN_SRC emacs-lisp
  (setq help-window-select t)
#+END_SRC

* popwin
  [[https://github.com/m2ym/popwin-el][popwin]] describes itself as freeing me from the hell of annoying
  buffers. Let's see if that's true: 

#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :ensure t
    :config
    (popwin-mode 1))
#+END_SRC

* Passwords
  I use [[https://www.passwordstore.org/][pass]] to manage all my passwords and login info. This lets me
  easily access it from within emacs:

#+BEGIN_SRC emacs-lisp
  (when (executable-find "pass")
    (use-package pass
      :ensure t
      :config
      (setq password-store-password-length 20)))
#+END_SRC

* Highlights
This package provides a visual cue whenever we change a block of text
by highlighting it for a bit:

#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
    :ensure t
    :diminish volatile-highlights-mode
    :config
    (volatile-highlights-mode t))
#+END_SRC

* Try
This package lets me try out other packages before installing them by
installing them to tmp:


#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* Undo-tree
  Emacs undo system is incredibly powerful but a bit confusing. This
  package has a great visualization system that helps out, bound to
  =C-x u= by default. Originally, =C-z= minimizes emacs. That's stupid, so
  let's make it undo instead like a sane person. Note that redo is
  bound 

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :bind
    ("C-z" . undo-tree-undo)
    ("C-?" . undo-tree-redo)
    ("C- x u" . undo-tree-visualize)
    :config
    (global-undo-tree-mode))
#+END_SRC

* Miscellaneous 
  Here are a bunch of things I want emacs to do (or not) but don't
  seem to fit in other sections. 
** Replace selected text
Emacs by default doesn't replace selected text if you start typing
over it. Since that's the behavior of virtually all other programs,
let's make emacs do that too:

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode)
#+END_SRC

** Backup files
   I want emacs to make these, but don't want to clutter up my project
   folders with tons of backup files. Solution: put them in the
   ~.emacs.d/~ directory.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))
#+END_SRC
** Blinking cursor & highlight line
   A blinking cursor gets kinda annoying, so get rid of it:

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC

Also, I like the current line to be highlighted. Makes it easy to see
where I am:

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Garbage collection
The default value for garbage collection in emacs is quite low. Let's
override that when we're using the minibuffer:

#+BEGIN_SRC emacs-lisp
  (defun my-minibuffer-setup-hook ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun my-minibuffer-exit-hook ()
    (setq gc-cons-threshold 800000))

  (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)

#+END_SRC
** Refresh buffers
   Emacs should refresh buffers automatically so if they've changed on
   disk the buffer will update. I want dired to do this, but don't ask
   me. 

#+BEGIN_SRC emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
  (global-auto-revert-mode 1)
#+END_SRC
** Move buffers
   Sometimes the buffers are in the wrong places. This lets me move
   them around. 

#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t
    :bind
    ("M-S-<up>" . buf-move-up)
    ("M-S-<down>" . buf-move-down)
    ("M-S-<left>" . buf-move-left)
    ("M-S-<right>" . buf-move-right)
    :config
    (setq buffer-move-behavior 'move))
#+END_SRC
** Resize windows
   We can resize windows now! Though this doesn't work in org-mode for
   whatever reason.... 
*** TODO Why doesn't this work in org mode? 
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+END_SRC
** Move around quickly
You can ~C-n~ and whatnot to go by line, but sometimes I want to move
a bit more quickly than that. Using ~C-S-n~ will now let me: 

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-n")
                  (lambda ()
                    (interactive)
                    (ignore-errors (next-line 5))))

  (global-set-key (kbd "C-S-p")
                  (lambda ()
                    (interactive)
                    (ignore-errors (previous-line 5))))

  (global-set-key (kbd "C-S-f")
                  (lambda ()
                    (interactive)
                    (ignore-errors (forward-char 5))))

  (global-set-key (kbd "C-S-b")
                  (lambda ()
                    (interactive)
                    (ignore-errors (backward-char 5))))
#+END_SRC

** Mouse copy
   Holding control while selecting text will paste it wherever point
   is. Holding control and shift "moves" the text there. 

#+BEGIN_SRC emacs-lisp
  (use-package mouse-copy
    :disabled t
    :config
    (global-set-key [C-down-mouse-1] 'mouse-drag-secondary-pasting)
    (global-set-key [C-S-down-mouse-1] 'mouse-drag-secondary-moving))
#+END_SRC

** Start maximized
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized)) 

#+END_SRC
** Better defaults 
   This is inspired by the [[https://github.com/technomancy/better-defaults][better defaults]] package, but I don't like
   everything in there. 

We can also bind ~C-+~ and ~C--~ to increase and decrease text
size. Watch out - you need to remember to press shift to get the plus
symbol. 

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-+") 'text-scale-increase) ; C-+ increases font size
  (define-key global-map (kbd "C--") 'text-scale-decrease) ; C-- decreases font size
#+END_SRC

Yes, please save my place when opening/closing files: 
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :config
    (setq-default save-place t))
#+END_SRC

I like having the menu-bar, but not if I'm in terminal. I don't really
want the toolbar or the scroll bars, though. 
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

Don't ever use tabs. Always use spaces. 
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

   Emacs "kills" and "yanks" instead of cutting and pasting. Using
   this, we can ~C-w~ and that will kill the active region (whatever
   you have selected). If you haven't selected anything, it'll kill
   the line it's on. 
#+BEGIN_SRC emacs-lisp
  ;; http://emacs-fu.blogspot.co.uk/2009/11/copying-lines-without-selecting-them.html
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))
#+END_SRC

   This will set the frame name to the name of the file, so you can
   see what file you've got selected in the menu bar. 

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
    '("Emacs - " (buffer-file-name "%f"
      (dired-directory dired-directory "%b"))))
#+END_SRC

We can also define ~C-M-<backspace>~ to kill back to the first
non-whitespace character on a line: 

#+BEGIN_SRC emacs-lisp
  (defun sanityinc/kill-back-to-indentation ()
    "Kill from point back to the first non-whitespace character on the line."
    (interactive)
    (let ((prev-pos (point)))
      (back-to-indentation)
      (kill-region (point) prev-pos)))

  (bind-key "C-M-<backspace>" 'sanityinc/kill-back-to-indentation)
#+END_SRC

Because I'm lazy, I want to just type y or n instead of spelling out
yes/no. 

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

We can use shift-mouse for selecting from point:

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "<S-down-mouse-1>") 'mouse-save-then-kill)

#+END_SRC

Better search defaults:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
#+END_SRC

A few final modifications: 

#+BEGIN_SRC emacs-lisp
  (setq   save-interprogram-paste-before-kill t
          apropos-do-all t
          mouse-yank-at-point t
          require-final-newline t
          visible-bell t
          load-prefer-newer t
          ediff-window-setup-function 'ediff-setup-windows-plain
          save-place-file (concat user-emacs-directory "places"))
#+END_SRC
